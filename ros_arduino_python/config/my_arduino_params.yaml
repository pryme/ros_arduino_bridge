# For a direct USB cable connection, the port name is typically
# /dev/ttyACM# where is # is a number such as 0, 1, 2, etc
# For a wireless connection like XBee, the port is typically
# /dev/ttyUSB# where # is a number such as 0, 1, 2, etc.

port: /dev/ttyACM0
baud: 57600
timeout: 0.1

rate: 50
sensorstate_rate: 10

use_base_controller: True
base_controller_rate: 2
# TODO: set rate above slow for debug;  was 10
# Acc. RAB README base_controller_rate controls how often odometry data are published
## however, in base_controller.py it also determines rate for polling and speed setpoint adjustments

# For a robot that uses base_footprint, change base_frame to base_footprint
base_frame: base_link

# === Robot drivetrain parameters
wheel_diameter: 0.063
wheel_track: 0.099
encoder_resolution: 48 # do I have to fake this?
gear_reduction: 1.0
motors_reversed: True
# FRAME_RATE is number of frames/sec used for converting m/s velocity to (encoder ticks / frame)
## Default FRAME_RATE in original RAB is 30 (Hz)
## Default for my interval-based control is 1 (Hz)
FRAME_RATE: 1

# === PID parameters
Kp: 50
Kd: 0
Ki: 30
Ko: 6000
accel_limit: 1.0
# min_abs_speed is the min abs val speed sp to be sent to the Teensy PID loop (avoid deadband)
min_abs_speed: 80

# === Sensor definitions.  Examples only - edit for your robot.
#     Sensor type can be one of the follow (case sensitive!):
#	  * Ping
#	  * GP2D12
#	  * Analog
#	  * Digital
#	  * PololuMotorCurrent
#	  * PhidgetsVoltage
#	  * PhidgetsCurrent (20 Amp, DC)



sensors: {
  #motor_current_left:   {pin: 0, type: PololuMotorCurrent, rate: 5},
  #motor_current_right:  {pin: 1, type: PololuMotorCurrent, rate: 5},
  #ir_front_center:      {pin: 2, type: GP2D12, rate: 10},
  #sonar_front_center:   {pin: 5, type: Ping, rate: 10},
  arduino_led:          {pin: 11, type: Digital, rate: 5, direction: output}
}
